{"ast":null,"code":"import { ADD_TO_CART, RESET_CART, REMOVE_FROM_CART, GET_ALL_CART_SUCCESS, GET_ALL_CART_FAIL } from \"../actions/type\";\nconst initialState = {\n  cartItems: [],\n  cart: [],\n  cartLoading: true,\n  error: null\n}; // eslint-disable-next-line import/no-anonymous-default-export\n\nexport default function (state = initialState, action) {\n  const {\n    payload,\n    type\n  } = action; // const values = localStorage.getItem(\"cart\");\n  // state.cartItems.push([...state.cartItems, values]);\n\n  switch (type) {\n    case ADD_TO_CART:\n      const item = payload;\n      const existItem = state.cartItems.find(x => x.product === item.product);\n\n      if (existItem) {\n        return { ...state,\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case REMOVE_FROM_CART:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case GET_ALL_CART_SUCCESS:\n      return {\n        cart: payload,\n        cartLoading: false,\n        cartItems: [...state.cartItems]\n      };\n\n    case GET_ALL_CART_FAIL:\n      return {\n        error: payload,\n        cartLoading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/parkwaylabs/Documents/Projects/ECrew/TravelClient/src/redux/cart.js"],"names":["ADD_TO_CART","RESET_CART","REMOVE_FROM_CART","GET_ALL_CART_SUCCESS","GET_ALL_CART_FAIL","initialState","cartItems","cart","cartLoading","error","state","action","payload","type","item","existItem","find","x","product","map","filter"],"mappings":"AAAA,SACEA,WADF,EAEEC,UAFF,EAGEC,gBAHF,EAIEC,oBAJF,EAKEC,iBALF,QAMO,iBANP;AAQA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,WAAW,EAAE,IAHM;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB,C,CAOA;;AACA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,MAA1B,CADqD,CAErD;AACA;;AAEA,UAAQE,IAAR;AACE,SAAKb,WAAL;AACE,YAAMc,IAAI,GAAGF,OAAb;AACA,YAAMG,SAAS,GAAGL,KAAK,CAACJ,SAAN,CAAgBU,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcJ,IAAI,CAACI,OAA/C,CAAlB;;AACA,UAAIH,SAAJ,EAAe;AACb,eAAO,EACL,GAAGL,KADE;AAELJ,UAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBa,GAAhB,CAAqBF,CAAD,IAC7BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCJ,IAAlC,GAAyCG,CADhC;AAFN,SAAP;AAMD,OAPD,MAOO;AACL,eAAO,EACL,GAAGP,KADE;AAELJ,UAAAA,SAAS,EAAE,CAAC,GAAGI,KAAK,CAACJ,SAAV,EAAqBQ,IAArB;AAFN,SAAP;AAID;;AAEH,SAAKZ,gBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBc,MAAhB,CAAwBH,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACC,OAAnD;AAFN,OAAP;;AAIF,SAAKT,oBAAL;AACE,aAAO;AACLI,QAAAA,IAAI,EAAEK,OADD;AAELJ,QAAAA,WAAW,EAAE,KAFR;AAGLF,QAAAA,SAAS,EAAE,CAAC,GAAGI,KAAK,CAACJ,SAAV;AAHN,OAAP;;AAKF,SAAKF,iBAAL;AACE,aAAO;AACLK,QAAAA,KAAK,EAAEG,OADF;AAELJ,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAIF;AACE,aAAOE,KAAP;AAnCJ;AAqCD","sourcesContent":["import {\n  ADD_TO_CART,\n  RESET_CART,\n  REMOVE_FROM_CART,\n  GET_ALL_CART_SUCCESS,\n  GET_ALL_CART_FAIL,\n} from \"../actions/type\";\n\nconst initialState = {\n  cartItems: [],\n  cart: [],\n  cartLoading: true,\n  error: null,\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function (state = initialState, action) {\n  const { payload, type } = action;\n  // const values = localStorage.getItem(\"cart\");\n  // state.cartItems.push([...state.cartItems, values]);\n\n  switch (type) {\n    case ADD_TO_CART:\n      const item = payload;\n      const existItem = state.cartItems.find((x) => x.product === item.product);\n      if (existItem) {\n        return {\n          ...state,\n          cartItems: state.cartItems.map((x) =>\n            x.product === existItem.product ? item : x\n          ),\n        };\n      } else {\n        return {\n          ...state,\n          cartItems: [...state.cartItems, item],\n        };\n      }\n\n    case REMOVE_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter((x) => x.product !== action.payload),\n      };\n    case GET_ALL_CART_SUCCESS:\n      return {\n        cart: payload,\n        cartLoading: false,\n        cartItems: [...state.cartItems],\n      };\n    case GET_ALL_CART_FAIL:\n      return {\n        error: payload,\n        cartLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}