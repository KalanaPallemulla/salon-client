{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, REGISTER_FAIL, USER_LOADED, REGISTER_SUCCESS } from \"./type\";\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"http://localhost:8000/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const login = value => async dispatch => {\n  console.log(\"hi\");\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"http://localhost:8000/api/login\", value, config);\n    console.log(res.data.token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n    console.log(error);\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const registerUser = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"http://localhost:8000/api/register\", formData, config);\n    console.log(res.data.token);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n    console.log(error);\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/parkwaylabs/Documents/Projects/ECrew/TravelClient/src/actions/auth.js"],"names":["axios","setAuthToken","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","REGISTER_FAIL","USER_LOADED","REGISTER_SUCCESS","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","login","value","console","log","config","headers","post","errors","response","registerUser","formData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SACEC,UADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,WALF,EAMEC,gBANF,QAOO,QAPP;AASA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBV,IAAAA,YAAY,CAACS,YAAY,CAACC,KAAd,CAAZ;AACD;;AACD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,gCAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAGD;AACF,CAhBM;AAkBP,OAAO,MAAMgB,KAAK,GAAIC,KAAD,IAAW,MAAOV,QAAP,IAAoB;AAClDW,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAI;AACF,UAAMX,GAAG,GAAG,MAAMZ,KAAK,CAACwB,IAAN,CAChB,iCADgB,EAEhBL,KAFgB,EAGhBG,MAHgB,CAAlB;AAKAF,IAAAA,OAAO,CAACC,GAAR,CAAYT,GAAG,CAACI,IAAJ,CAASL,KAArB;AAEAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAIAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GAbD,CAaE,OAAOS,KAAP,EAAc;AACd,UAAMQ,MAAM,GAAGR,KAAK,CAACS,QAAN,CAAeV,IAAf,CAAoBS,MAAnC;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD;AACF,CA5BM;AA8BP,OAAO,MAAMwB,YAAY,GAAIC,QAAD,IAAc,MAAOnB,QAAP,IAAoB;AAC5D,QAAMa,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAMA,MAAI;AACF,UAAMX,GAAG,GAAG,MAAMZ,KAAK,CAACwB,IAAN,CAChB,oCADgB,EAEhBI,QAFgB,EAGhBN,MAHgB,CAAlB;AAKAF,IAAAA,OAAO,CAACC,GAAR,CAAYT,GAAG,CAACI,IAAJ,CAASL,KAArB;AAEAF,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,gBADC;AAEPQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAIAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GAbD,CAaE,OAAOS,KAAP,EAAc;AACd,UAAMQ,MAAM,GAAGR,KAAK,CAACS,QAAN,CAAeV,IAAf,CAAoBS,MAAnC;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD;AACF,CA3BM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport {\n  AUTH_ERROR,\n  LOGIN_FAIL,\n  LOGIN_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  REGISTER_SUCCESS,\n} from \"./type\";\n\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"http://localhost:8000/api/auth\");\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\nexport const login = (value) => async (dispatch) => {\n  console.log(\"hi\");\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      \"http://localhost:8000/api/login\",\n      value,\n      config\n    );\n    console.log(res.data.token);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n    console.log(error);\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\nexport const registerUser = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.post(\n      \"http://localhost:8000/api/register\",\n      formData,\n      config\n    );\n    console.log(res.data.token);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n    console.log(error);\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}