{"ast":null,"code":"import { GET_ALL_SERVICES_SUCCESS, GET_ALL_SERVICES_ERROR, GET_SERVICE_SUCCESS, GET_SERVICE_ERROR } from \"../actions/type\";\nconst initialState = {\n  services: [],\n  service: null,\n  servicesLoading: true,\n  error: null\n};\nexport default function (state = initialState, action) {\n  const {\n    payload,\n    type\n  } = action;\n\n  switch (type) {\n    case GET_ALL_SERVICES_SUCCESS:\n      return { ...state,\n        services: payload,\n        servicesLoading: false,\n        error: null\n      };\n\n    case GET_SERVICE_SUCCESS:\n      return { ...state,\n        service: payload,\n        servicesLoading: false\n      };\n\n    case GET_ALL_SERVICES_ERROR:\n    case GET_SERVICE_ERROR:\n      return { ...state,\n        services: [],\n        service: null,\n        servicesLoading: false,\n        error: payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/parkwaylabs/Documents/Projects/ECrew/TravelClient/src/redux/service.js"],"names":["GET_ALL_SERVICES_SUCCESS","GET_ALL_SERVICES_ERROR","GET_SERVICE_SUCCESS","GET_SERVICE_ERROR","initialState","services","service","servicesLoading","error","state","action","payload","type"],"mappings":"AAAA,SACEA,wBADF,EAEEC,sBAFF,EAGEC,mBAHF,EAIEC,iBAJF,QAKO,iBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,eAAe,EAAE,IAHE;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,MAA1B;;AAEA,UAAQE,IAAR;AACE,SAAKZ,wBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,QAAQ,EAAEM,OAFL;AAGLJ,QAAAA,eAAe,EAAE,KAHZ;AAILC,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAMF,SAAKN,mBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,OAAO,EAAEK,OAFJ;AAGLJ,QAAAA,eAAe,EAAE;AAHZ,OAAP;;AAKF,SAAKN,sBAAL;AACA,SAAKE,iBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELJ,QAAAA,QAAQ,EAAE,EAFL;AAGLC,QAAAA,OAAO,EAAE,IAHJ;AAILC,QAAAA,eAAe,EAAE,KAJZ;AAKLC,QAAAA,KAAK,EAAEG;AALF,OAAP;;AAOF;AACE,aAAOF,KAAP;AAxBJ;AA0BD","sourcesContent":["import {\n  GET_ALL_SERVICES_SUCCESS,\n  GET_ALL_SERVICES_ERROR,\n  GET_SERVICE_SUCCESS,\n  GET_SERVICE_ERROR,\n} from \"../actions/type\";\n\nconst initialState = {\n  services: [],\n  service: null,\n  servicesLoading: true,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  const { payload, type } = action;\n\n  switch (type) {\n    case GET_ALL_SERVICES_SUCCESS:\n      return {\n        ...state,\n        services: payload,\n        servicesLoading: false,\n        error: null,\n      };\n    case GET_SERVICE_SUCCESS:\n      return {\n        ...state,\n        service: payload,\n        servicesLoading: false,\n      };\n    case GET_ALL_SERVICES_ERROR:\n    case GET_SERVICE_ERROR:\n      return {\n        ...state,\n        services: [],\n        service: null,\n        servicesLoading: false,\n        error: payload,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}